# 1 "/home/user/Documents/CPP/Assignments To Do/binary trees - part a/sources/BinaryTree.hpp"
# 1 "/home/user/Documents/CPP/Assignments To Do/binary trees - part a/sources//"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "/home/user/Documents/CPP/Assignments To Do/binary trees - part a/sources/BinaryTree.hpp"

namespace ariel
{
    template <typename T>
    class BinaryTree
    {
    private:
        struct Node
        {
            T value;
            Node *right_child;
            Node *left_child;

            Node()
            {
                Node add = new Node;
                add.left_child = nullptr;
                add.right_child = nullptr;
                return add;
            }

            Node(T val) : value(val), right_child(nullptr), left_child(nullptr){};
            Node(T val, Node *r, Node *l) : value(val), right_child(r), left_child(l){};

            ~Node()
            {
                delete this;
            }
        };

        Node *root;

    public:
        BinaryTree() : root(nullptr){};

        BinaryTree(BinaryTree &other)
        {

        }
        BinaryTree<T> &add_root(T make_root)
        {
            return *this;
        }

        BinaryTree<T> &add_left(T root, T left)
        {
            return *this;
        }

        BinaryTree<T> &add_right(T root, T right)
        {
            return *this;
        }

        friend std::ostream &operator<<(std::ostream &os, BinaryTree &print) { return os; };


        class iterator
        {
        protected:
            Node *pointer_to_current_node;

        public:
            explicit iterator(Node *ptr) : pointer_to_current_node(ptr){};

            iterator(const iterator& other): pointer_to_current_node(other.pointer_to_current_node){};

            virtual iterator &operator++(int) { return *this; }

            virtual iterator &operator++()
            {
                return *this;
            }

            T &operator=(T &other){};

            bool operator==(const iterator &other) { return pointer_to_current_node == other.pointer_to_current_node; }

            bool operator!=(const iterator &other) { return pointer_to_current_node != other.pointer_to_current_node; }

            T &operator*()
            {
                return pointer_to_current_node->value;
            }

            T *operator->() const
            {
                return &(pointer_to_current_node->value);
            }
        };

        class inorder : public iterator
        {
            public:
            explicit inorder(Node *ptr = nullptr): iterator(ptr){};
            iterator &begin_inorder() { return *this; };

            iterator &end_inorder() { return *this; };
        };

        class preorder : public iterator
        {
            public:
            explicit preorder(Node* ptr = nullptr): iterator(ptr){};
            iterator &begin_preorder() { return *this; };

            iterator &end_preorder() { return *this; };
        };

        class postorder : public iterator
        {
            public:
            explicit postorder(Node* ptr = nullptr): iterator(ptr){};
            iterator &begin_postorder() { return *this; };

            iterator &end_postorder() { return *this; };
        };

        preorder begin_preorder()
        {
            return preorder(this->root);
        }
        preorder end_preorder()
        {
            return preorder(nullptr);
        }

        inorder begin_inorder()
        {
            return inorder(this->root);
        }

        inorder end_inorder()
        {
            return inorder(nullptr);
        }

        postorder begin_postorder()
        {
            return postorder(this->root);
        }

        postorder end_postorder()
        {
            return postorder(nullptr);
        }

        inorder begin()
        {
            return inorder(this->root);
        }

        inorder end()
        {
            return inorder(nullptr);
        }


        Node *get_root() { return root; }

        Node *get_right(Node *father) { return father->right_child; }
        Node *get_left(Node *father) { return father->left_child; }

    };
};
